Задание: Разработка системы авторизации пользователей

Цель:
Создать систему авторизации пользователей для веб-офиса рекламного агентства, где есть пользователи сотрудники и пользователи заказчики, привязанные к профилю компании-заказчика. Система должна предусматривать возможность настройки уровней доступа и выводить результаты на странице после авторизации.

Описание задачи:

1. Создание моделей пользователей:
- Сотрудники (Employee):
- Поля: имя, фамилия, email, пароль, роль (роль определяет уровень доступа: администратор, менеджер, сотрудник).
- Заказчики (Client):
- Поля: имя, фамилия, email, пароль, компания (ссылка на модель компании).
- Компания (Company):
- Поля: название компании, адрес, контактные данные, уникальный код компании.

2. Настройка уровней доступа:
- Роли сотрудников:
- Администратор: полный доступ ко всем функциям системы, включая регистрацию новых сотрудников.
- Менеджер: доступ к управлению проектами и задачами, регистрация новых клиентов и их компаний.
- Сотрудник: доступ только к задачам, назначенным на него.
- Роли заказчиков:
- Клиент: доступ к просмотру проектов и задач своей компании.

3. Реализация системы авторизации и аутентификации:
- Регистрация пользователей:
- Сотрудники: регистрируются администратором или менеджером.
- Клиенты: регистрируются сотрудником (менеджером) с привязкой к компании. Сотрудник генерирует код компании, который клиенты используют при регистрации.
- Авторизация пользователей.
- Настройка уровней доступа в зависимости от роли пользователя.

4. Вывод информации на странице после авторизации:
- Для сотрудников: отображение информации о пользователе (имя, роль), список проектов и задач, к которым у них есть доступ. Имитировать.
- Для заказчиков: отображение информации о пользователе (имя, компания), список проектов и задач компании. Имитировать.

5. Фреймворк и технологии:
- Backend: Python, Django (или FastAPI)
- Frontend: Любой фреймворк на выбор (например, React, Vue.js) или шаблоны Django
- База данных: PostgreSQL или SQLite (на выбор)
- Docker: для контейнеризации (опционально)

Требования к реализации:

1. Модели и миграции:
- Создать модели для сотрудников, заказчиков и компаний.
- Настроить миграции для создания таблиц в базе данных.

2. Регистрация и авторизация:
- Реализовать формы регистрации для сотрудников и заказчиков.
- Сотрудники регистрируются администратором или менеджером.
- Менеджеры регистрируют новые компании и генерируют уникальные коды.
- Клиенты регистрируются, указывая код компании, который связывает их с соответствующей компанией.
- Реализовать форму авторизации.
- Настроить маршруты для регистрации и авторизации.

3. Настройка уровней доступа:
- Реализовать механизм проверки прав доступа на основе ролей пользователя.
- Ограничить доступ к определенным маршрутам и действиям в зависимости от роли пользователя.

4. Интерфейс пользователя:
- Создать простую страницу для отображения информации о пользователе после авторизации.
- Выводить список проектов и задач для сотрудников и заказчиков в зависимости от уровня доступа.

Критерии оценки:

1. Корректность работы:
- Система должна корректно обрабатывать регистрацию и авторизацию пользователей.
- Уровни доступа должны работать в соответствии с заданием.

2. Качество кода:
- Код должен быть чистым и хорошо структурированным.
- Соблюдение принципов ООП и лучших практик разработки.

3. Документация:
- Описание структуры базы данных и основных моделей.
- Инструкции по запуску проекта.

4. Интерфейс пользователя:
- Простота и удобство использования интерфейса.
- Корректное отображение информации в зависимости от уровня доступа пользователя.

Сроки выполнения:
- Срок выполнения задания: Прием результатов до 29.07.

Примерная структура проекта:


project/
│
├── company/
│ ├── init.py
│ ├── admin.py
│ ├── apps.py
│ ├── models.py
│ ├── views.py
│ ├── urls.py
│ └── ...
│
├── user/
│ ├── init.py
│ ├── admin.py
│ ├── apps.py
│ ├── models.py
│ ├── views.py
│ ├── urls.py
│ └── ...
│
├── project/
│ ├── init.py
│ ├── settings.py
│ ├── urls.py
│ ├── wsgi.py
│ └── ...
│
└── manage.py


Результаты:
- Ссылку на репозиторий с кодом проекта (GitHub, GitLab и т.д.).
- Краткую документацию по проекту.
- Запущенный проект на любом удобном для вас хостинге (например, Heroku, DigitalOcean, AWS), чтобы мы могли опробовать его живьем. Предоставьте URL-адрес для доступа к проекту.

- Предоставляем хост для проекта по желанию.
- Дополнительно рассматриваются личные предложение по проекту в части решений. Отсутствие ни на что не влияет.
